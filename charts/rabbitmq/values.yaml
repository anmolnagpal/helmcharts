## RabbitMQ image version
## ref: https://hub.docker.com/_/rabbitmq/tags/
##
image:
  repository: rabbitmq
  tag: 3-management
  pullPolicy: IfNotPresent

additionalAffinities: {}

terminationGracePeriodSeconds: 60

## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
configEnvs:
  #RABBITMQ_NODENAME: rabbit@localhost
  RABBITMQ_NODE_TYPE: stats
  RABBITMQ_CLUSTER_NODE_NAME: ''
  RABBITMQ_VHOST: /
  RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 614M ## if change this, also change resources.requests.memory

configFiles: {}

secretEnvs:
  ## ref: https://hub.docker.com/_/rabbitmq/
  RABBITMQ_DEFAULT_USER: guest
  ## ref: https://hub.docker.com/_/rabbitmq/
  RABBITMQ_DEFAULT_PASS: guest
  ## Erlang cookie to determine whether different nodes are allowed to communicate with each other
  RABBITMQ_ERLANG_COOKIE: cookie

secretFiles: {}

## volumeMounts
volumeMounts:
  - name: data
    mountPath: /var/lib/rabbitmq

## TLS support. Generate certificates with OpenSSL
tls:
  enabled: false
  files:
    # Server Certificate
    server_certificate.pem: |-
      ...
    # Server Key
    server_key.pem: |-
      ...
    # Certificate Authority Chain
    ca_certificate.pem: |-
      ...

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 1Gi ## if change this, also change configEnvs.RABBITMQ_VM_MEMORY_HIGH_WATERMARK
    cpu: 100m

persistence:
  enabled: true

  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## rabbitmq data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: ssd
  accessMode: ReadWriteOnce
  size: 8Gi

service:
  #annotations: {}
  type: ClusterIP
  # If using type: LoadBalancer
  #loadBalancerIP: 0.0.0.0
  #loadBalancerSourceRanges:
  #  - 0.0.0.0/0
  ports:
    amqp: 5672 # Change to 5671 for tls
    stats: 15672
    epmd: 4369
    dist: 25672
    metrics: 9090
  externalIPs: []

metrics:
  enabled: false
  image:
    repository: kbudde/rabbitmq-exporter
    tag: v0.25.2
    pullPolicy: IfNotPresent
  configEnvs:
    # Log ouput format. TTY and JSON are suported
    OUTPUT_FORMAT: TTY
    # log level. possible values: "debug", "info", "warning", "error", "fatal", or "panic"
    LOG_LEVEL: info
    # true/0 will ignore certificate errors of the management plugin
    SKIPVERIFY: false
    # reqgex queue filter. just matching names are exported
    INCLUDE_QUEUES: .*
    # regex, matching queue names are not exported (useful for short-lived rpc queues). First performed INCLUDE, after SKIP
    SKIP_QUEUES: ^$
    # comma-separated list of extended scraping capabilities supported by the target RabbitMQ server
    RABBIT_CAPABILITIES: bert
    # List of enabled modules. Just "connections" is not enabled by default
    RABBIT_EXPORTERS: exchange,node,overview,queue
